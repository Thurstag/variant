<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ include file="Functions.ttinclude" #>
<#@ parameter type="System.Int32" name="VariantArgumentTypesCount" #>
// Copyright 2022-<#= DateTime.Now.Year #> variant Project
// Licensed under Apache License 2.0 or any later version
// Refer to the LICENSE file included.

using System.Runtime.InteropServices;

namespace System;

<#
    for (var variant = 1; variant < VariantArgumentTypesCount; variant++) {
        var variantTypeParameters = Enumerable.Range(0, variant + 1).Select(VariantTypeParameter).ToArray();
        var variantType = VariantType(variantTypeParameters);
#>
/// <summary>
/// A type-safe union containing one of its type arguments at a time
/// </summary>
<#
        for (var i = 0; i < variantTypeParameters.Length; i++) {
            var variantTypeParameter = variantTypeParameters[i];
#>
/// <typeparam name="<#= variantTypeParameter #>"><#= Nth(i + 1) #> possible value type</typeparam>
<#
        }
#>
/// <remarks>This class was generated by T4 tool</remarks>
public class <#= variantType #> {

<#
        if (variant != 0) {
#>
    private readonly byte _index;
<#
        }
#>
    private readonly <#= variant == 0 ? variantTypeParameters[variant] : "object" #> _value;

<#
        if (variant == 0) {
#>
    /// <summary>
    /// Create an instance of <see cref="Variant{T0}"/> containing a <see cref="T0"/>
    /// <param name="t0">Value</param>
    /// </summary>
    public Variant(T0 t0) {
        _value = t0;
    }

<#
        } else {
            for (var constructor = 0; constructor <= variant; constructor++) {
                var variantTypeParameter = variantTypeParameters[constructor];
                var paramName = $"t{constructor}";
#>
    /// <summary>
    /// Create an instance of <#= SeeVariantType(variantTypeParameters) #> containing a <see cref="<#= variantTypeParameter #>"/>
    /// <param name="<#= paramName #>">Value</param>
    /// </summary>
    public Variant(<#= variantTypeParameter #> <#= paramName #>) {
        _value = <#= paramName #>;
        _index = <#= constructor #>;
    }

<#
            }
        }

        var mapArguments = string.Join(", ", variantTypeParameters.Select(t => $"Func<{t}, T> map{t.ToUpper()}"));
#>
    /// <summary>
    /// Map the value held by this variant using the suitable function
    /// </summary>
<#
        foreach (var variantTypeParameter in variantTypeParameters) {
#>
    /// <param name="map<#= variantTypeParameter #>">Function taking a <see cref="<#= variantTypeParameter #>"/> and returning a <see cref="T"/> </param>
<#
        }
#>
    /// <typeparam name="T">Result type</typeparam>
    /// <returns>Mapping result</returns>
    public T Map<T>(<#= mapArguments #>) {
<#
        if (variant == 0) {
#>
        return mapT0(_value);
<#
        } else {
#>
        switch (_index) {
<#
            for (var @case = 0; @case <= variant; @case++) {
                var variantTypeParameter = VariantTypeParameter(@case);
#>
            case <#= @case #>: return map<#= variantTypeParameter #>((<#= variantTypeParameter #>) _value);
<#
            }
#>
            default: throw new InvalidOperationException("Variant doesn't contain a value");
        }
<#
        }
#>
    }
<#
        // Implicit operators
        for (var @operator = 0; @operator <= variant; @operator++) {
            var argName = $"t{@operator}";
            var argType = variantTypeParameters[@operator];
#>

    /// <summary>
    /// Convert a <see cref="<#= argType #>"/> into a <#= SeeVariantType(variantTypeParameters) #>
    /// </summary>
    /// <param name="<#= argName #>">Conversion input</param>
    /// <returns>Variant</returns>
    public static implicit operator <#= variantType #>(<#= argType #> <#= argName #>) => new <#= variantType #>(<#= argName #>);
<#
        }
        if (variantTypeParameters.Length > 1) {
            foreach (var variantSubsetTypeParameters in SubLists(variantTypeParameters).Select(a => a.ToArray())) {
#>

    /// <summary>
    /// Convert a <#= SeeVariantType(variantSubsetTypeParameters) #> into a <#= SeeVariantType(variantTypeParameters) #>
    /// </summary>
    /// <param name="variant">Conversion input</param>
    /// <returns>Variant</returns>
    public static implicit operator <#= variantType #>(<#= VariantType(variantSubsetTypeParameters) #> variant) => variant.Map<<#= variantType #>>(<#=
                    string.Join(", ", variantSubsetTypeParameters.Select(_ => "t => t")) #>);
<#
            }
        }
#>
}

<#
    }

    string Nth(int number) => number switch {
        1 => "1st",
        2 => "2nd",
        3 => "3rd",
        _ => $"{number}th"
        };
#>